"""create all tables

Revision ID: 82429a5f1038
Revises: 8311e33fe533
Create Date: 2025-05-26 19:04:46.911813

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '82429a5f1038'
down_revision: Union[str, None] = '8311e33fe533'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('machine_types',
    sa.Column('id_machine_type', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id_machine_type')
    )
    op.create_table('material_types',
    sa.Column('id_material_type', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('standard', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id_material_type')
    )
    op.create_table('work_types',
    sa.Column('id_work_type', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id_work_type')
    )
    op.create_table('having_machines',
    sa.Column('id_having_machine', sa.Integer(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('id_machine_type_machine_types', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_machine_type_machine_types'], ['machine_types.id_machine_type'], ),
    sa.PrimaryKeyConstraint('id_having_machine'),
    sa.UniqueConstraint('id_machine_type_machine_types')
    )
    op.create_table('journal_complete_works',
    sa.Column('id_journal_complete_work', sa.Integer(), nullable=False),
    sa.Column('justification', sa.Text(), nullable=False),
    sa.Column('total_work_scope', sa.Integer(), nullable=False),
    sa.Column('total_work_cost', postgresql.MONEY(), nullable=False),
    sa.Column('scope_start_year', sa.Integer(), nullable=False),
    sa.Column('cost_start_year', postgresql.MONEY(), nullable=False),
    sa.Column('scope_month', sa.Integer(), nullable=False),
    sa.Column('cost_month', postgresql.MONEY(), nullable=False),
    sa.Column('scope_end_year', sa.Integer(), nullable=False),
    sa.Column('cost_end_year', postgresql.MONEY(), nullable=False),
    sa.Column('scope_remain', sa.Integer(), nullable=False),
    sa.Column('cost_remain', postgresql.MONEY(), nullable=False),
    sa.Column('id_work_type_work_types', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_work_type_work_types'], ['work_types.id_work_type'], ),
    sa.PrimaryKeyConstraint('id_journal_complete_work'),
    sa.UniqueConstraint('id_work_type_work_types')
    )
    op.create_table('work_scopes',
    sa.Column('id_work_scope', sa.Integer(), nullable=False),
    sa.Column('scope', sa.Integer(), nullable=False),
    sa.Column('id_work_type_work_types', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_work_type_work_types'], ['work_types.id_work_type'], ),
    sa.PrimaryKeyConstraint('id_work_scope'),
    sa.UniqueConstraint('id_work_type_work_types')
    )
    op.create_table('calendar',
    sa.Column('id_work', sa.Integer(), nullable=False),
    sa.Column('worker_count', sa.Integer(), nullable=False),
    sa.Column('machines_count', sa.Integer(), nullable=False),
    sa.Column('duration', sa.Interval(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.Column('id_work_scope_work_scopes', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_work_scope_work_scopes'], ['work_scopes.id_work_scope'], ),
    sa.PrimaryKeyConstraint('id_work'),
    sa.UniqueConstraint('id_work_scope_work_scopes')
    )
    op.create_table('estimate_calcs',
    sa.Column('id_estimates_calc', sa.Integer(), nullable=False),
    sa.Column('build_cost', postgresql.MONEY(), nullable=False),
    sa.Column('montage_cost', postgresql.MONEY(), nullable=False),
    sa.Column('equip_cost', postgresql.MONEY(), nullable=False),
    sa.Column('other_cost', postgresql.MONEY(), nullable=False),
    sa.Column('total_cost', postgresql.MONEY(), nullable=False),
    sa.Column('id_work_scope_work_scopes', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_work_scope_work_scopes'], ['work_scopes.id_work_scope'], ),
    sa.PrimaryKeyConstraint('id_estimates_calc'),
    sa.UniqueConstraint('id_work_scope_work_scopes')
    )
    op.create_table('needs_machines',
    sa.Column('id_needs_machine', sa.Integer(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('id_work_scope_work_scopes', sa.Integer(), nullable=False),
    sa.Column('id_machine_type_machine_types', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_machine_type_machine_types'], ['machine_types.id_machine_type'], ),
    sa.ForeignKeyConstraint(['id_work_scope_work_scopes'], ['work_scopes.id_work_scope'], ),
    sa.PrimaryKeyConstraint('id_needs_machine')
    )
    op.create_table('needs_materials',
    sa.Column('id_needs_material', sa.Integer(), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('id_material_type_material_types', sa.Integer(), nullable=False),
    sa.Column('id_work_scope_work_scopes', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_material_type_material_types'], ['material_types.id_material_type'], ),
    sa.ForeignKeyConstraint(['id_work_scope_work_scopes'], ['work_scopes.id_work_scope'], ),
    sa.PrimaryKeyConstraint('id_needs_material')
    )
    op.create_table('accepted_works',
    sa.Column('id_accepted_work', sa.Integer(), nullable=False),
    sa.Column('scope_begin', sa.Integer(), nullable=False),
    sa.Column('cost_begin', postgresql.MONEY(), nullable=False),
    sa.Column('solid_cost', postgresql.MONEY(), nullable=False),
    sa.Column('id_work_scope_work_scopes', sa.Integer(), nullable=False),
    sa.Column('id_journal_complete_work_journal_complete_works', sa.Integer(), nullable=False),
    sa.Column('id_estimates_calc_estimate_calcs', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_estimates_calc_estimate_calcs'], ['estimate_calcs.id_estimates_calc'], ),
    sa.ForeignKeyConstraint(['id_journal_complete_work_journal_complete_works'], ['journal_complete_works.id_journal_complete_work'], ),
    sa.ForeignKeyConstraint(['id_work_scope_work_scopes'], ['work_scopes.id_work_scope'], ),
    sa.PrimaryKeyConstraint('id_accepted_work'),
    sa.UniqueConstraint('id_estimates_calc_estimate_calcs'),
    sa.UniqueConstraint('id_journal_complete_work_journal_complete_works'),
    sa.UniqueConstraint('id_work_scope_work_scopes')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('accepted_works')
    op.drop_table('needs_materials')
    op.drop_table('needs_machines')
    op.drop_table('estimate_calcs')
    op.drop_table('calendar')
    op.drop_table('work_scopes')
    op.drop_table('journal_complete_works')
    op.drop_table('having_machines')
    op.drop_table('work_types')
    op.drop_table('material_types')
    op.drop_table('machine_types')
    # ### end Alembic commands ###
